# -*- shell-script -*-

#
# Collected shell (bash) utilities.  This is a collection of shell
# utilities I've used in building software, maintaining my systems and
# doing simple data processing at the shell.
#
# author: Kyle Burton <kyle.burton@gmail.com>
#
#  http://github.com/kyleburton/profile
#

#
# xargs grep:  find . -type f | xargs grep some-token
#
function xg () {
  xargs grep "$@"
}

#
# 'find files': find . -type f
#
# NB: in each of these 'find' commands, if the first argument exists a
# directory, it is taken as the location to search, the next argument
# is taken as the pattern (when a pattern is used) and any remaining
# arguments are passed to the last command in the pipeline.
#
function ff () {
  DIR="."
  if [ -d "$1" ]; then
    DIR="$1"
    shift
  fi
  find "$DIR" -type f "$@"
}

#
# Find files named 'X', where 'X' is automatically surrounded by
# wildcards so it can occurr anywhere within the name of the files.
#
#   find . -type f -name '*X*'
#
function ffn () {
  DIR="."
  if [ -d "$1" ]; then
    DIR="$1"
    shift
  fi
  find "$DIR" -type f -name "*$1*"
}

# case insensitive version of ffn
function ffni () {
  DIR="."
  if [ -d "$1" ]; then
    DIR="$1"
    shift
  fi
  find "$DIR" -type f -iname "*$1*"
}

# 'find directories'
function fd () {
  DIR="."
  if [ -d "$1" ]; then
    DIR="$1"
    shift
  fi
  find "$DIR" -type d "$@"
}

# find directories named
function fdn () {
  DIR="."
  if [ -d "$1" ]; then
    DIR="$1"
    shift
  fi
  find "$DIR" -type d -name "*$1*"
}

# case insensitive version of fdn
function fdni () {
  DIR="."
  if [ -d "$1" ]; then
    DIR="$1"
    shift
  fi
  find "$DIR" -type d -iname "*$1*"
}

# 'find clojure files', like ffn, but automatically appends a '.clj' suffix on the pattern.
function fclj () {
  DIR="."
  if [ -d "$1" ]; then
    DIR="$1"
    shift
  fi
  PAT="*.clj"
  if [ -n "$1" ]; then
      PAT="*$1*.clj"
      shift
  fi
  find "$DIR" -type f -name "$PAT" "$@"
}

# case insensitive version of fclj
function fclji () {
  DIR="."
  if [ -d "$1" ]; then
    DIR="$1"
    shift
  fi
  PAT="*.clj"
  if [ -n "$1" ]; then
      PAT="*$1*.clj"
      shift
  fi
  find "$DIR" -type f -iname "$PAT" "$@"
}

# 'find java files'
function fj () {
  DIR="."
  if [ -d "$1" ]; then
    DIR="$1"
    shift
  fi
  PAT="*.java"
  if [ -n "$1" ]; then
      PAT="*$1*.java"
      shift
  fi
  find "$DIR" -type f -name "$PAT" "$@"
}

# case insensitive version of fj
function fji () {
  DIR="."
  if [ -d "$1" ]; then
    DIR="$1"
    shift
  fi
  PAT="*.java"
  if [ -n "$1" ]; then
      PAT="*$1*.java"
      shift
  fi
  find "$DIR" -type f -iname "$PAT" "$@"
}

# 'find ruby files'
function fr () {
  DIR="."
  if [ -d "$1" ]; then
    DIR="$1"
    shift
  fi
  PAT="*.rb"
  if [ -n "$1" ]; then
      PAT="*$1*.rb"
      shift
  fi
  find "$DIR" -type f -name "$PAT" "$@"
}

# case insensitive version of fr
function fri () {
  DIR="."
  if [ -d "$1" ]; then
    DIR="$1"
    shift
  fi
  PAT="*.rb"
  if [ -n "$1" ]; then
      PAT="*$1*.rb"
      shift
  fi
  find "$DIR" -type f -iname "$PAT" "$@"
}

# combinations of the various find commands followed by a pipe to xargs grep
function fcljxg () {
  fclj -print0 | xargs -0 grep "$@"
}

function fcljixg () {
  fclji -print0 | xargs -0 grep "$@"
}

function fjxg () {
  fj -print0 | xargs -0 grep "$@"
}

function fjixg () {
  fji -print0 | xargs -0 grep "$@"
}

function frxg () {
  fr -print0   | xargs -0 grep "$@"
}

function frixg () {
  fri -print0 | xargs -0 grep "$@"
}

# various maven shortcuts
function mvno  () {
  mvn -o "$@"
}

function mvnoc  () {
  mvn -o compile "$@"
}

function mvnc   () {
  mvn compile "$@"
}

function mvnt   () {
  mvn -Dmaven.test.skip=true -DskipTests "$@"
}

function mvnot  () {
  mvn -o -Dmaven.test.skip=true -DskipTests "$@"
}

function mvni   () {
  mvn install "$@"
}

function mvnoi  () {
  mvn -o install "$@"
}

# very simple, hard-coded, completion for common maven commands and options.
complete -o default -W "generate-sources jar:jar assembly:assembly validate compile test package integration-test verify install deploy -DskipTests -Dmaven.test.skip=true" mvn

#
# Shell based data processing utilities, these all use standard unix
# utilities that nearly all expect tab-delimited input and produce tab
# delimited output.
#

# Header preseving grep, very useful for database table dumps as well as delimited and fixed width data files.
function hgrep () {
  FILE="$1"
  shift
  (head -n 1 "$FILE"; tail -n +2 "$FILE" | grep "$@")
}

function hgrepi () {
  FILE="$1"
  shift
  (head -n 1 "$FILE"; tail -n +2 "$FILE" | grep -i "$@")
}

# header preserving sort
function hsort () {
  FILE="$1"
  shift
  (head -n 1 "$FILE"; tail -n +2 "$FILE" | sort "$@")
}

# header preserving tail
function htail () {
  FILE="$1"
  shift
  (head -n 1 "$FILE"; tail -n +2 "$FILE" | tail "$@")
}

# test if any of the given files (or directories) exist
function any_exists () {
  if [ -z "$1" ]; then
    return -1
  fi
  if [ -e "$1" ]; then
    return 0
  fi

  shift
  any_exists $@
}

# jump back to project root
function proot () {
  # project root is defined as the first directory (going back toward the root)
  # containing one of the following
  #   .git
  #   Makefile, makefile
  #   Rakefile
  #   pom.xml
  FILES=".git Makefile makefile Rakefile pom.xml"
  if any_exists $FILES; then
    echo "Project Root: `pwd`"
    return
  fi

  if [ "$(pwd)" == "$HOME" ]; then
    echo "Project Root not found"
    return
  fi

  cd ..
  proot
}


function mroot () {
  FILES=".git pom.xml"
  if any_exists $FILES; then
    echo "Maven Project Root: `pwd`"
    return
  fi

  if [ "$(pwd)" == "$HOME" ]; then
    echo "Maven Project Root not found"
    return
  fi

  cd ..
  proot
}

function is_osx () {
  uname -a | grep -q ^Darwin
}

function open_file () {
  if is_osx; then
    open "$@"
  else
    echo "Error(krb-bash-functions:open_file): unknown platform? => `uname -a`"
  fi
}

function view_markup () {
  FILE="$1"
  echo "$FILE ${FILE#*.}"
  if      [ "md" = "${FILE#*.}" ]; then
    echo "treating $FILE as markdown (maruku)"
    maruku "$FILE"
    OUT_FILE="`basename $1 .md`.html"
    open_file "$OUT_FILE"
    return $?
  fi

  if [ "textile" = "${FILE#*.}" ]; then
    echo "treating $FILE as textile (redcloth)"
    OUT_FILE="`basename $1`.html"
    redcloth "$FILE" > "$OUT_FILE"
    open_file "$OUT_FILE"
    return $?
  fi

  echo "Not a recognized markup type, just invoking open_file($FILE)"
  open_file "$FILE"
}

alias s='cd ..'
alias rm='rm -i'
alias mv='mv -i'

################################################################################
## TODO: LS Color Options (at least for OSX, need to see if these work on Linux too)
BLACK=a
RED=b
GREEN=c
BROWN=d
BLUE=e
MAGENTA=f
CYAN=g
LIGHT_GREY=h
BOLD_BLACK_USUALLY_SHOWS_UP_AS_DARK_GREY=A
BOLD_RED=B
BOLD_GREEN=C
BOLD_BROWN_USUALLY_SHOWS_UP_AS_YELLOW=D
BOLD_BLUE=E
BOLD_MAGENTA=F
BOLD_CYAN=G
BOLD_LIGHT_GREY__LOOKS_LIKE_BRIGHT_WHITE=H
DEFAULT_FOREGROUND_OR_BACKGROUND=x

function set_ls_colors_osx_default () {
  export LS_COLOR_DIRECTORY="$BLUE$DEFAULT_FOREGROUND_OR_BACKGROUND"
  export LS_COLOR_SYMBOLIC_LINK="$BOLD_MAGENTA$DEFAULT_FOREGROUND_OR_BACKGROUND"
  export LS_COLOR_SOCKET="$GREN$DEFAULT_FOREGROUND_OR_BACKGROUND"
  export LS_COLOR_PIPE="$BROWN$DEFAULT_FOREGROUND_OR_BACKGROUND"
  export LS_COLOR_EXECUTABLE="$RED$DEFAULT_FOREGROUND_OR_BACKGROUND"
  export LS_COLOR_BLOCK_SPECIAL="$BLUE$CYAN"
  export LS_COLOR_CHARACTER_SPECIAL="$BLUE$BROWN"
  export LS_COLOR_EXECUTABLE_WITH_SETUID_BIT_SET="$BLACK$RED"
  export LS_COLOR_EXECUTABLE_WITH_SETGID_BIT_SET="$BLACK$CYAN"
  export LS_COLOR_DIRECTORY_WRITABLE_TO_OTHERS_WITH_STICKY_BIT="$BLACK$GREN"
  export LS_COLOR_DIRECTORY_WRITABLE_TO_OTHERS_WITHOUT_STICKY_BIT="$BLACK$BROWN"
  export LSCOLORS="$LS_COLOR_DIRECTORY$LS_COLOR_SYMBOLIC_LINK$LS_COLOR_SOCKET$LS_COLOR_PIPE$LS_COLOR_EXECUTABLE$LS_COLOR_BLOCK_SPECIAL$LS_COLOR_CHARACTER_SPECIAL$LS_COLOR_EXECUTABLE_WITH_SETUID_BIT_SET$LS_COLOR_EXECUTABLE_WITH_SETGID_BIT_SET$LS_COLOR_DIRECTORY_WRITABLE_TO_OTHERS_WITH_STICKY_BIT$LS_COLOR_DIRECTORY_WRITABLE_TO_OTHERS_WITHOUT_STICKY_BIT"
}

function set_ls_colors_osx_dark_background () {
  export LS_COLOR_DIRECTORY="$CYAN$DEFAULT_FOREGROUND_OR_BACKGROUND"
  export LS_COLOR_SYMBOLIC_LINK="$BOLD_MAGENTA$DEFAULT_FOREGROUND_OR_BACKGROUND"
  export LS_COLOR_SOCKET="$GREN$DEFAULT_FOREGROUND_OR_BACKGROUND"
  export LS_COLOR_PIPE="$BROWN$DEFAULT_FOREGROUND_OR_BACKGROUND"
  export LS_COLOR_EXECUTABLE="$RED$DEFAULT_FOREGROUND_OR_BACKGROUND"
  export LS_COLOR_BLOCK_SPECIAL="$BLUE$CYAN"
  export LS_COLOR_CHARACTER_SPECIAL="$BLUE$BROWN"
  export LS_COLOR_EXECUTABLE_WITH_SETUID_BIT_SET="$BLACK$RED"
  export LS_COLOR_EXECUTABLE_WITH_SETGID_BIT_SET="$BLACK$CYAN"
  export LS_COLOR_DIRECTORY_WRITABLE_TO_OTHERS_WITH_STICKY_BIT="$BLACK$GREN"
  export LS_COLOR_DIRECTORY_WRITABLE_TO_OTHERS_WITHOUT_STICKY_BIT="$BLACK$BROWN"
  export LSCOLORS="$LS_COLOR_DIRECTORY$LS_COLOR_SYMBOLIC_LINK$LS_COLOR_SOCKET$LS_COLOR_PIPE$LS_COLOR_EXECUTABLE$LS_COLOR_BLOCK_SPECIAL$LS_COLOR_CHARACTER_SPECIAL$LS_COLOR_EXECUTABLE_WITH_SETUID_BIT_SET$LS_COLOR_EXECUTABLE_WITH_SETGID_BIT_SET$LS_COLOR_DIRECTORY_WRITABLE_TO_OTHERS_WITH_STICKY_BIT$LS_COLOR_DIRECTORY_WRITABLE_TO_OTHERS_WITHOUT_STICKY_BIT"
}


set_ls_colors_osx_dark_background
